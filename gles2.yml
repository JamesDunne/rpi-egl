--- 
GENERATOR: 
  PackageName: gles2
  PackageDescription: "Package gles2 provides Go bindings for the OpenGL ES v2 API."
  PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
  FlagGroups:
    - {name: CFLAGS, flags: [-I/opt/vc/include]}
    - {name: LDFLAGS, flags: [-L/opt/vc/lib,-lGLESv2]}
  SysIncludes:
    - GLES2/gl2.h

PARSER:
  Arch: armhf
  SourcesPaths:
    - GLES2/gl2.h
  IncludePaths:
    # NOTE: Replace these paths if you want to re-generate.
    - /opt/vc/include
    - /usr/include
    - /usr/include/linux
    - /usr/include/arm-linux-gnueabihf
  Defines:
    #__ANDROID__: 1
    __ARM_PCS_VFP: 1

TRANSLATOR: 
  ConstRules: 
    defines: expand
    enum: expand
  PtrTips:
    function:
      - {target: ^glGenBuffers$, tips: [size,arr]}
      - {target: ^glGenFramebuffers$, tips: [size,arr]}
      - {target: ^glGenRenderbuffers$, tips: [size,arr]}
      - {target: ^glGenTextures$, tips: [size,arr]}
      - {target: ^glGetActiveAttrib$, tips: [0,0,size,ref,ref,ref,arr]}
      - {target: ^glGetActiveUniform$, tips: [0,0,size,ref,ref,ref,arr]}
      - {target: ^glGetAttachedShaders$, tips: [0,size,ref,arr]}
      - {target: ^glGetShaderSource$, tips: [0,size,ref,arr]}
      - {target: ^glGetShaderInfoLog$, tips: [0,size,ref,arr]}
      - {target: ^glGetProgramInfoLog$, tips: [0,size,ref,arr]}
      - {target: ^glGetShaderPrecisionFormat$, tips: [0,0,arr,ref]}
      - {target: ^glGetVertexAttribPointerv$, tips: [0,0,ref]}
      # parameter at the end:
      - {target: ^glUniformMatrix, tips: [0,0,0,ref]}
      - {target: iv$, tips: [0,0,ref]}
      - {target: fv$, tips: [0,0,ref]}
      
  TypeTips:
    function:
      # do not stick with GL types, use Go types for API instead
      - {target: ., self: plain, tips: [plain,plain,plain,plain,plain,plain,plain,plain,plain]}
   
  Rules: 
    global:
      - {action: accept, from: "^GL"}
      - {action: replace, from: "^GL"}
    function:
      - {action: accept, from: ^gl}
      - {action: replace, from: ^gl}
      - {transform: export}
    type:
      - {action: replace, from: "_t$"}
      - {transform: export}
      - {load: snakecase}
    const:
      - {action: replace, from: "^_"}
    private:
      - {transform: unexport}
      - {load: snakecase}
    post-global:
      - {action: doc, from: "^gl",
              to: "https://www.khronos.org/opengles/sdk/docs/man/xhtml/$name.xml"}
